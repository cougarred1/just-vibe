generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  username       String
  googleId       String          @unique
  location       String
  bio            String          @db.VarChar(300)
  image          String          @db.VarChar(300)
  lastReset      DateTime?
  followedBy     Follows[]       @relation("followedBy")
  following      Follows[]       @relation("following")
  reviews        Review[]
  albumsOfTheDay AlbumOfTheDay[]
  TopAlbums      TopAlbums[]
  TopArtists     TopArtists[]
  posts          Post[]
  reactions      Reaction[]
  artists        Artist[]
  albums         Album[]
}

model Review {
  id      Int    @id @default(autoincrement())
  text    String
  rating  Int
  userId  Int
  albumId Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Album   Album  @relation(fields: [albumId], references: [id])
  posts   Post[]

  @@index([albumId], map: "Review_albumId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model Album {
  id             Int             @id @default(autoincrement())
  albumName      String
  artistName     String
  image          String          @db.VarChar(300)
  userId         Int
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews        Review[]
  albumsOfTheDay AlbumOfTheDay[]
  TopAlbums      TopAlbums[]
  posts          Post[]
}

model Artist {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(300)
  userId     Int
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  TopArtists TopArtists[]
}

model AlbumOfTheDay {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  albumId Int
  album   Album    @relation(fields: [albumId], references: [id])
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([albumId], map: "AlbumOfTheDay_albumId_fkey")
  @@index([userId], map: "AlbumOfTheDay_userId_fkey")
}

model TopAlbums {
  position Int
  album    Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  albumId  Int
  userId   Int

  @@unique([position, albumId, userId])
}

model TopArtists {
  position Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  userId   Int
  artistId Int

  @@unique([position, artistId, userId])
}

model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
  followedById Int
  following    User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId  Int

  @@id([followingId, followedById])
}

model Post {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  date      DateTime   @default(now())
  postType  PostType
  albumId   Int?
  reviewId  Int?
  album     Album?     @relation(fields: [albumId], references: [id])
  review    Review?    @relation(fields: [reviewId], references: [id])
  reactions Reaction[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
}

enum Entity {
  ALBUM
  ARTIST
  SONG
}

enum PostType {
  REVIEW
  ALBUMOFTHEDAY
}
